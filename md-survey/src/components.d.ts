/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FA, MA, Question, SA } from "./shared/interface";
export namespace Components {
    interface AppComplete {
    }
    interface AppHeader {
    }
    interface AppHome {
    }
    interface AppPage {
        "page": number;
    }
    interface AppRoot {
    }
    interface AppSurvey {
    }
    interface MdcButton {
        "disabled": boolean;
    }
    interface MdcCheckbox {
        "checked": boolean;
        "disabled": boolean;
    }
    interface MdcRadio {
        "checked": boolean;
        "disabled": boolean;
        "name": string;
    }
    interface MdcTextarea {
        "cols": number;
        "disabled": boolean;
        "getValue": () => Promise<any>;
        "placeholder": string;
        "rows": number;
        "value": string;
    }
    interface MdcTextfield {
        "disabled": boolean;
        "placeholder": string;
        "value": string;
    }
    interface QFa {
        "disabled": boolean;
        "q": FA;
    }
    interface QMa {
        "disabled": boolean;
        "q": MA;
    }
    interface QQuestion {
        "disabled": boolean;
        "name": string;
        "question": Question;
    }
    interface QSa {
        "disabled": boolean;
        "name": string;
        "q": SA;
    }
}
declare global {
    interface HTMLAppCompleteElement extends Components.AppComplete, HTMLStencilElement {
    }
    var HTMLAppCompleteElement: {
        prototype: HTMLAppCompleteElement;
        new (): HTMLAppCompleteElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppPageElement extends Components.AppPage, HTMLStencilElement {
    }
    var HTMLAppPageElement: {
        prototype: HTMLAppPageElement;
        new (): HTMLAppPageElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSurveyElement extends Components.AppSurvey, HTMLStencilElement {
    }
    var HTMLAppSurveyElement: {
        prototype: HTMLAppSurveyElement;
        new (): HTMLAppSurveyElement;
    };
    interface HTMLMdcButtonElement extends Components.MdcButton, HTMLStencilElement {
    }
    var HTMLMdcButtonElement: {
        prototype: HTMLMdcButtonElement;
        new (): HTMLMdcButtonElement;
    };
    interface HTMLMdcCheckboxElement extends Components.MdcCheckbox, HTMLStencilElement {
    }
    var HTMLMdcCheckboxElement: {
        prototype: HTMLMdcCheckboxElement;
        new (): HTMLMdcCheckboxElement;
    };
    interface HTMLMdcRadioElement extends Components.MdcRadio, HTMLStencilElement {
    }
    var HTMLMdcRadioElement: {
        prototype: HTMLMdcRadioElement;
        new (): HTMLMdcRadioElement;
    };
    interface HTMLMdcTextareaElement extends Components.MdcTextarea, HTMLStencilElement {
    }
    var HTMLMdcTextareaElement: {
        prototype: HTMLMdcTextareaElement;
        new (): HTMLMdcTextareaElement;
    };
    interface HTMLMdcTextfieldElement extends Components.MdcTextfield, HTMLStencilElement {
    }
    var HTMLMdcTextfieldElement: {
        prototype: HTMLMdcTextfieldElement;
        new (): HTMLMdcTextfieldElement;
    };
    interface HTMLQFaElement extends Components.QFa, HTMLStencilElement {
    }
    var HTMLQFaElement: {
        prototype: HTMLQFaElement;
        new (): HTMLQFaElement;
    };
    interface HTMLQMaElement extends Components.QMa, HTMLStencilElement {
    }
    var HTMLQMaElement: {
        prototype: HTMLQMaElement;
        new (): HTMLQMaElement;
    };
    interface HTMLQQuestionElement extends Components.QQuestion, HTMLStencilElement {
    }
    var HTMLQQuestionElement: {
        prototype: HTMLQQuestionElement;
        new (): HTMLQQuestionElement;
    };
    interface HTMLQSaElement extends Components.QSa, HTMLStencilElement {
    }
    var HTMLQSaElement: {
        prototype: HTMLQSaElement;
        new (): HTMLQSaElement;
    };
    interface HTMLElementTagNameMap {
        "app-complete": HTMLAppCompleteElement;
        "app-header": HTMLAppHeaderElement;
        "app-home": HTMLAppHomeElement;
        "app-page": HTMLAppPageElement;
        "app-root": HTMLAppRootElement;
        "app-survey": HTMLAppSurveyElement;
        "mdc-button": HTMLMdcButtonElement;
        "mdc-checkbox": HTMLMdcCheckboxElement;
        "mdc-radio": HTMLMdcRadioElement;
        "mdc-textarea": HTMLMdcTextareaElement;
        "mdc-textfield": HTMLMdcTextfieldElement;
        "q-fa": HTMLQFaElement;
        "q-ma": HTMLQMaElement;
        "q-question": HTMLQQuestionElement;
        "q-sa": HTMLQSaElement;
    }
}
declare namespace LocalJSX {
    interface AppComplete {
    }
    interface AppHeader {
    }
    interface AppHome {
    }
    interface AppPage {
        "page"?: number;
    }
    interface AppRoot {
    }
    interface AppSurvey {
    }
    interface MdcButton {
        "disabled"?: boolean;
    }
    interface MdcCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
    }
    interface MdcRadio {
        "checked"?: boolean;
        "disabled"?: boolean;
        "name"?: string;
    }
    interface MdcTextarea {
        "cols"?: number;
        "disabled"?: boolean;
        "onText"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        "rows"?: number;
        "value"?: string;
    }
    interface MdcTextfield {
        "disabled"?: boolean;
        "onText"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface QFa {
        "disabled"?: boolean;
        "onValid"?: (event: CustomEvent<boolean>) => void;
        "q"?: FA;
    }
    interface QMa {
        "disabled"?: boolean;
        "onValid"?: (event: CustomEvent<boolean>) => void;
        "q"?: MA;
    }
    interface QQuestion {
        "disabled"?: boolean;
        "name"?: string;
        "question"?: Question;
    }
    interface QSa {
        "disabled"?: boolean;
        "name"?: string;
        "onValid"?: (event: CustomEvent<boolean>) => void;
        "q"?: SA;
    }
    interface IntrinsicElements {
        "app-complete": AppComplete;
        "app-header": AppHeader;
        "app-home": AppHome;
        "app-page": AppPage;
        "app-root": AppRoot;
        "app-survey": AppSurvey;
        "mdc-button": MdcButton;
        "mdc-checkbox": MdcCheckbox;
        "mdc-radio": MdcRadio;
        "mdc-textarea": MdcTextarea;
        "mdc-textfield": MdcTextfield;
        "q-fa": QFa;
        "q-ma": QMa;
        "q-question": QQuestion;
        "q-sa": QSa;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-complete": LocalJSX.AppComplete & JSXBase.HTMLAttributes<HTMLAppCompleteElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-page": LocalJSX.AppPage & JSXBase.HTMLAttributes<HTMLAppPageElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-survey": LocalJSX.AppSurvey & JSXBase.HTMLAttributes<HTMLAppSurveyElement>;
            "mdc-button": LocalJSX.MdcButton & JSXBase.HTMLAttributes<HTMLMdcButtonElement>;
            "mdc-checkbox": LocalJSX.MdcCheckbox & JSXBase.HTMLAttributes<HTMLMdcCheckboxElement>;
            "mdc-radio": LocalJSX.MdcRadio & JSXBase.HTMLAttributes<HTMLMdcRadioElement>;
            "mdc-textarea": LocalJSX.MdcTextarea & JSXBase.HTMLAttributes<HTMLMdcTextareaElement>;
            "mdc-textfield": LocalJSX.MdcTextfield & JSXBase.HTMLAttributes<HTMLMdcTextfieldElement>;
            "q-fa": LocalJSX.QFa & JSXBase.HTMLAttributes<HTMLQFaElement>;
            "q-ma": LocalJSX.QMa & JSXBase.HTMLAttributes<HTMLQMaElement>;
            "q-question": LocalJSX.QQuestion & JSXBase.HTMLAttributes<HTMLQQuestionElement>;
            "q-sa": LocalJSX.QSa & JSXBase.HTMLAttributes<HTMLQSaElement>;
        }
    }
}
